{"version":3,"sources":["ryb-parser.js","hex-to-rgb.js","App.js","serviceWorker.js","index.js"],"names":["rgb2ryb","color","r","g","b","w","Math","min","mg","max","y","my","n","module","exports","ryb2rgb","complimentary","limit","hexToRgb","hex","replace","m","result","exec","parseInt","colors","memo","_useState","useState","_useState2","Object","slicedToArray","setHex","_useState3","_useState4","ryb","setRyb","_useState5","_useState6","rgb","setRgb","react_default","a","createElement","className","index_es","container","spacing","item","xs","label","value","onChange","e","target","_hex","_rgb","_ryb","parseHex","margin","variant","join","total","apply","toConsumableArray","map","i","key","style","background-color","text-shadow","concat","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ad86431.chunk.js","sourcesContent":["/**\r\n * Original Work\r\n * Author: Arah J. Leonard\r\n * Copyright 01AUG09\r\n * Original source:\r\n * http://www.insanit.net/computer-programming/red-green-blue-to-red-yellow-blue-part-2/\r\n * Distributed under the LGPL - http://www.gnu.org/copyleft/lesser.html\r\n * ALSO distributed under the The MIT License from the Open Source Initiative\r\n * (OSI) - http://www.opensource.org/licenses/mit-license.php\r\n * You may use EITHER of these licenses to work with / distribute this source code.\r\n * Enjoy!\r\n *\r\n * Modified by Dave Eddy <dave@daveeddy.com>\r\n *  * ported to JS\r\n */\r\n\r\nif (typeof exports !== 'undefined') {\r\n    module.exports = rgb2ryb;\r\n    module.exports.rgb2ryb = rgb2ryb;\r\n    module.exports.ryb2rgb = ryb2rgb;\r\n    module.exports.complimentary = complimentary;\r\n  }\r\n  \r\n  /**\r\n   * Convert a red-green-blue system to a red-yellow-blue system.\r\n   */\r\n  function rgb2ryb(color) {\r\n      var r = color[0], g = color[1], b = color[2];\r\n      // Remove the whiteness from the color.\r\n      var w = Math.min(r, g, b);\r\n      r -= w;\r\n      g -= w;\r\n      b -= w;\r\n  \r\n      var mg = Math.max(r, g, b);\r\n  \r\n      // Get the yellow out of the red+green.\r\n      var y = Math.min(r, g);\r\n      r -= y;\r\n      g -= y;\r\n  \r\n      // If this unfortunate conversion combines blue and green, then cut each in\r\n      // half to preserve the value's maximum range.\r\n      if (b && g) {\r\n          b /= 2.0;\r\n          g /= 2.0;\r\n      }\r\n  \r\n      // Redistribute the remaining green.\r\n      y += g;\r\n      b += g;\r\n  \r\n      // Normalize to values.\r\n      var my = Math.max(r, y, b);\r\n      if (my) {\r\n          var n = mg / my;\r\n          r *= n;\r\n          y *= n;\r\n          b *= n;\r\n      }\r\n  \r\n      // Add the white back in.\r\n      r += w;\r\n      y += w;\r\n      b += w;\r\n  \r\n      // And return back the ryb typed accordingly.\r\n      return [r, y, b];\r\n  }\r\n  \r\n  /**\r\n   * Convert a red-yellow-blue system to a red-green-blue system.\r\n   */\r\n  function ryb2rgb(color) {\r\n      var r = color[0], y = color[1], b = color[2];\r\n      // Remove the whiteness from the color.\r\n      var w = Math.min(r, y, b);\r\n      r -= w;\r\n      y -= w;\r\n      b -= w;\r\n  \r\n      var my = Math.max(r, y, b);\r\n  \r\n      // Get the green out of the yellow and blue\r\n      var g = Math.min(y, b);\r\n      y -= g;\r\n      b -= g;\r\n  \r\n      if (b && g) {\r\n          b *= 2.0;\r\n          g *= 2.0;\r\n      }\r\n  \r\n      // Redistribute the remaining yellow.\r\n      r += y;\r\n      g += y;\r\n  \r\n      // Normalize to values.\r\n      var mg = Math.max(r, g, b);\r\n      if (mg) {\r\n          var n = my / mg;\r\n          r *= n;\r\n          g *= n;\r\n          b *= n;\r\n      }\r\n  \r\n      // Add the white back in.\r\n      r += w;\r\n      g += w;\r\n      b += w;\r\n  \r\n      // And return back the ryb typed accordingly.\r\n      return [r, g, b];\r\n  }\r\n  \r\n  /**\r\n   * Return the complementary color values for a given color.\r\n   * You must also give it the upper limit of the color values, typically 255 for\r\n   * GUIs, 1.0 for OpenGL.\r\n   */\r\n  function complimentary(color, limit) {\r\n      var r = color[0], g = color[1], b = color[2];\r\n      limit = limit || 255;\r\n      return [limit - r, limit - g, limit - b];\r\n  }","function hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? [\r\n        parseInt(result[1], 16),\r\n        parseInt(result[2], 16),\r\n        parseInt(result[3], 16)\r\n     ] : null;\r\n}\r\n\r\nexport { hexToRgb }","import React, { memo, useState } from 'react';\nimport './App.css';\nimport { Grid, Button, TextField, Card, CardContent } from '@material-ui/core'\n\nimport { rgb2ryb } from './ryb-parser'\nimport { hexToRgb } from './hex-to-rgb'\n\nconst colors = [\n  'red', 'yellow', 'blue'\n]\n\nfunction App() {\n  const [hex, setHex] = useState('')\n  const [ryb, setRyb] = useState('')\n  const [rgb, setRgb] = useState('')\n\n  const parseHex = (_hex) => {\n    if (_hex) {\n      const _rgb = hexToRgb(_hex)\n      const _ryb = _rgb && rgb2ryb(_rgb)\n\n      setRyb(_ryb)\n      setRgb(_rgb)\n    }\n  }\n\n  const percentage = (r, y, b) => {\n    const total = r + y + b\n    return [100 / total * r,\n        100 / total * y,\n        100 / total * b\n    ]\n   }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Card>\n          <CardContent>\n            <Grid container spacing={8}>\n              <Grid item xs={12}>\n                <TextField \n                  label=\"hex code\"\n                  value={hex}\n                  onChange={e => {\n                    setHex(e.target.value)\n                    parseHex(e.target.value)\n                  }}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Grid>\n            {\n              rgb && <Grid container spacing={8}>\n              <Grid item xs>\n                RGB:\n              </Grid>\n              <Grid item xs>\n                {rgb.join(',')}\n              </Grid>\n            </Grid>\n            }\n            {\n              ryb && <Grid container spacing={8}>\n              <Grid item xs>\n                RYB:\n              </Grid>\n              <Grid item xs>\n                {ryb.join(',')}\n              </Grid>\n              <Grid item xs={12}>\n                {percentage(...ryb).map((item, i) => <div key={colors[i]} style={{ 'background-color': colors[i], color: 'white', 'text-shadow': '1px 1px 2px black' }}>{item}%</div>)}\n              </Grid>\n            </Grid>\n            }\n            {\n              hex && hexToRgb(hex) ? <Grid container spacing={8}>\n              <Grid item xs>\n              <div style={{ 'background-color': `rgb(${hexToRgb(hex).join(',')})`,\n             color: 'white', 'text-shadow': '1px 1px 2px black' , marginTop: 12\n            }}>\n                Result\n              </div>\n              </Grid>\n            </Grid> : null\n            }\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}